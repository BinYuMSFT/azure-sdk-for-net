// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AnalysisResultOperations.
    /// </summary>
    public static partial class AnalysisResultOperationsExtensions
    {
            /// <summary>
            /// Gets an Analysis Result of a Test Result by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='testResultName'>
            /// The Test Result Name. It equals to {osName}-{TestResultId} string.
            /// </param>
            /// <param name='analysisResultName'>
            /// The name of the Analysis Result of a Test Result. Possible values include:
            /// 'scriptExecution', 'reliability', 'memoryUtilization', 'cpuUtilization',
            /// 'memoryRegression', 'cpuRegression'
            /// </param>
            public static AnalysisResultSingletonResource Get(this IAnalysisResultOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, string testResultName, string analysisResultName)
            {
                return operations.GetAsync(resourceGroupName, testBaseAccountName, packageName, testResultName, analysisResultName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an Analysis Result of a Test Result by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='testResultName'>
            /// The Test Result Name. It equals to {osName}-{TestResultId} string.
            /// </param>
            /// <param name='analysisResultName'>
            /// The name of the Analysis Result of a Test Result. Possible values include:
            /// 'scriptExecution', 'reliability', 'memoryUtilization', 'cpuUtilization',
            /// 'memoryRegression', 'cpuRegression'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisResultSingletonResource> GetAsync(this IAnalysisResultOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, string testResultName, string analysisResultName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, testResultName, analysisResultName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
