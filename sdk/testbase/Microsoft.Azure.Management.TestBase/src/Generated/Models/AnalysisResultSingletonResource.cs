// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Analysis Result Singleton Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AnalysisResultSingletonResource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the AnalysisResultSingletonResource
        /// class.
        /// </summary>
        public AnalysisResultSingletonResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AnalysisResultSingletonResource
        /// class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource</param>
        /// <param name="grade">The grade of the test. Possible values include:
        /// 'None', 'NotAvailable', 'Pass', 'Fail'</param>
        /// <param name="scriptExecutionResults">Properties when
        /// analysisResultType is ScriptExecution.</param>
        /// <param name="reliabilityResults">Properties when analysisResultType
        /// is Reliability.</param>
        /// <param name="cpuUtilizationResults">Properties when
        /// analysisResultType is CPUUtilization.</param>
        /// <param name="memoryUtilizationResults">Properties when
        /// analysisResultType is MemoryUtilization.</param>
        /// <param name="cpuRegressionResults">Properties when
        /// analysisResultType is CPURegression.</param>
        /// <param name="memoryRegressionResults">Properties when
        /// analysisResultType is MemoryRegression.</param>
        public AnalysisResultSingletonResource(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string grade = default(string), IList<ScriptExecutionResult> scriptExecutionResults = default(IList<ScriptExecutionResult>), IList<ReliabilityResult> reliabilityResults = default(IList<ReliabilityResult>), IList<UtilizationResult> cpuUtilizationResults = default(IList<UtilizationResult>), IList<UtilizationResult> memoryUtilizationResults = default(IList<UtilizationResult>), IList<RegressionResult> cpuRegressionResults = default(IList<RegressionResult>), IList<RegressionResult> memoryRegressionResults = default(IList<RegressionResult>))
            : base(id, name, type)
        {
            SystemData = systemData;
            Grade = grade;
            ScriptExecutionResults = scriptExecutionResults;
            ReliabilityResults = reliabilityResults;
            CpuUtilizationResults = cpuUtilizationResults;
            MemoryUtilizationResults = memoryUtilizationResults;
            CpuRegressionResults = cpuRegressionResults;
            MemoryRegressionResults = memoryRegressionResults;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the system metadata relating to this resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Gets or sets the grade of the test. Possible values include:
        /// 'None', 'NotAvailable', 'Pass', 'Fail'
        /// </summary>
        [JsonProperty(PropertyName = "properties.grade")]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or sets properties when analysisResultType is ScriptExecution.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptExecutionResults")]
        public IList<ScriptExecutionResult> ScriptExecutionResults { get; set; }

        /// <summary>
        /// Gets or sets properties when analysisResultType is Reliability.
        /// </summary>
        [JsonProperty(PropertyName = "properties.reliabilityResults")]
        public IList<ReliabilityResult> ReliabilityResults { get; set; }

        /// <summary>
        /// Gets or sets properties when analysisResultType is CPUUtilization.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cpuUtilizationResults")]
        public IList<UtilizationResult> CpuUtilizationResults { get; set; }

        /// <summary>
        /// Gets or sets properties when analysisResultType is
        /// MemoryUtilization.
        /// </summary>
        [JsonProperty(PropertyName = "properties.memoryUtilizationResults")]
        public IList<UtilizationResult> MemoryUtilizationResults { get; set; }

        /// <summary>
        /// Gets or sets properties when analysisResultType is CPURegression.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cpuRegressionResults")]
        public IList<RegressionResult> CpuRegressionResults { get; set; }

        /// <summary>
        /// Gets or sets properties when analysisResultType is
        /// MemoryRegression.
        /// </summary>
        [JsonProperty(PropertyName = "properties.memoryRegressionResults")]
        public IList<RegressionResult> MemoryRegressionResults { get; set; }

    }
}
