// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RESTAPIforTestBaseClient.
    /// </summary>
    public static partial class RESTAPIforTestBaseClientExtensions
    {
            /// <summary>
            /// Gets the file upload URL of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='blobName'>
            /// The custom file name of the uploaded blob.
            /// </param>
            public static FileUploadURLResponse TestBaseAccountGetFileUploadUrl(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string blobName = default(string))
            {
                return operations.TestBaseAccountGetFileUploadUrlAsync(resourceGroupName, testBaseAccountName, blobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the file upload URL of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='blobName'>
            /// The custom file name of the uploaded blob.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileUploadURLResponse> TestBaseAccountGetFileUploadUrlAsync(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string blobName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestBaseAccountGetFileUploadUrlWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, blobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks that the Test Base Package name and version is valid and is not
            /// already in use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Test Base Package CheckNameAvailability
            /// operation.
            /// </param>
            public static CheckNameAvailabilityResult CheckPackageNameAvailability(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, PackageCheckNameAvailabilityParameters parameters)
            {
                return operations.CheckPackageNameAvailabilityAsync(resourceGroupName, testBaseAccountName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks that the Test Base Package name and version is valid and is not
            /// already in use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Test Base Package CheckNameAvailability
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityResult> CheckPackageNameAvailabilityAsync(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, PackageCheckNameAvailabilityParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckPackageNameAvailabilityWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the download URL of a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static DownloadURLResponse PackageGetDownloadURL(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.PackageGetDownloadURLAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the download URL of a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadURLResponse> PackageGetDownloadURLAsync(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PackageGetDownloadURLWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the download URL or the test result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='testResultName'>
            /// The Test Result Name. It equals to {osName}-{TestResultId} string.
            /// </param>
            public static DownloadURLResponse TestResultGetDownloadURL(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string packageName, string testResultName)
            {
                return operations.TestResultGetDownloadURLAsync(resourceGroupName, testBaseAccountName, packageName, testResultName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the download URL or the test result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='testResultName'>
            /// The Test Result Name. It equals to {osName}-{TestResultId} string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadURLResponse> TestResultGetDownloadURLAsync(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string packageName, string testResultName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestResultGetDownloadURLWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, testResultName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the download URL of the test execution screen recording.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='testResultName'>
            /// The Test Result Name. It equals to {osName}-{TestResultId} string.
            /// </param>
            public static DownloadURLResponse TestResultGetVideoDownloadURL(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string packageName, string testResultName)
            {
                return operations.TestResultGetVideoDownloadURLAsync(resourceGroupName, testBaseAccountName, packageName, testResultName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the download URL of the test execution screen recording.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='testResultName'>
            /// The Test Result Name. It equals to {osName}-{TestResultId} string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadURLResponse> TestResultGetVideoDownloadURLAsync(this IRESTAPIforTestBaseClient operations, string resourceGroupName, string testBaseAccountName, string packageName, string testResultName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestResultGetVideoDownloadURLWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, testResultName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
