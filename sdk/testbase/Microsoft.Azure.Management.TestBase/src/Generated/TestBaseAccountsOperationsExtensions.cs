// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TestBaseAccountsOperations.
    /// </summary>
    public static partial class TestBaseAccountsOperationsExtensions
    {
            /// <summary>
            /// Lists all the Test Base Accounts in a subscription. This API is required by
            /// ARM guidelines.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getDeleted'>
            /// The flag indicating if we need to include the Test Base Accounts which were
            /// soft deleted before.
            /// </param>
            public static IPage<TestBaseAccountResource> ListBySubscription(this ITestBaseAccountsOperations operations, bool? getDeleted = default(bool?))
            {
                return operations.ListBySubscriptionAsync(getDeleted).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Test Base Accounts in a subscription. This API is required by
            /// ARM guidelines.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getDeleted'>
            /// The flag indicating if we need to include the Test Base Accounts which were
            /// soft deleted before.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TestBaseAccountResource>> ListBySubscriptionAsync(this ITestBaseAccountsOperations operations, bool? getDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(getDeleted, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the Test Base Accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='getDeleted'>
            /// The flag indicating if we need to include the Test Base Accounts which were
            /// soft deleted before.
            /// </param>
            public static IPage<TestBaseAccountResource> ListByResourceGroup(this ITestBaseAccountsOperations operations, string resourceGroupName, bool? getDeleted = default(bool?))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, getDeleted).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Test Base Accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='getDeleted'>
            /// The flag indicating if we need to include the Test Base Accounts which were
            /// soft deleted before.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TestBaseAccountResource>> ListByResourceGroupAsync(this ITestBaseAccountsOperations operations, string resourceGroupName, bool? getDeleted = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, getDeleted, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the Test Base Accounts in a subscription. This API is required by
            /// ARM guidelines.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<TestBaseAccountResource> ListBySubscriptionNext(this ITestBaseAccountsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Test Base Accounts in a subscription. This API is required by
            /// ARM guidelines.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TestBaseAccountResource>> ListBySubscriptionNextAsync(this ITestBaseAccountsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the Test Base Accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<TestBaseAccountResource> ListByResourceGroupNext(this ITestBaseAccountsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the Test Base Accounts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TestBaseAccountResource>> ListByResourceGroupNextAsync(this ITestBaseAccountsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
