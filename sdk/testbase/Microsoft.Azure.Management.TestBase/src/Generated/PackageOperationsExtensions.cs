// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PackageOperations.
    /// </summary>
    public static partial class PackageOperationsExtensions
    {
            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource Create(this IPackageOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.CreateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> CreateAsync(this IPackageOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource Update(this IPackageOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.UpdateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> UpdateAsync(this IPackageOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageDeleteHeaders Delete(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.DeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageDeleteHeaders> DeleteAsync(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource Get(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.GetAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> GetAsync(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageHardDeleteHeaders HardDelete(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.HardDeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageHardDeleteHeaders> HardDeleteAsync(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HardDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource BeginCreate(this IPackageOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginCreateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> BeginCreateAsync(this IPackageOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource BeginUpdate(this IPackageOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginUpdateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> BeginUpdateAsync(this IPackageOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageDeleteHeaders BeginDelete(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageDeleteHeaders> BeginDeleteAsync(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageHardDeleteHeaders BeginHardDelete(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginHardDeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageHardDeleteHeaders> BeginHardDeleteAsync(this IPackageOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginHardDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
