// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TestBaseAccountOperations.
    /// </summary>
    public static partial class TestBaseAccountOperationsExtensions
    {
            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Account in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='restore'>
            /// The flag indicating if we would like to restore the Test Base Accounts
            /// which were soft deleted before.
            /// </param>
            public static TestBaseAccountResource Create(this ITestBaseAccountOperations operations, TestBaseAccountResource parameters, string resourceGroupName, string testBaseAccountName, bool? restore = default(bool?))
            {
                return operations.CreateAsync(parameters, resourceGroupName, testBaseAccountName, restore).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Account in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='restore'>
            /// The flag indicating if we would like to restore the Test Base Accounts
            /// which were soft deleted before.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountResource> CreateAsync(this ITestBaseAccountOperations operations, TestBaseAccountResource parameters, string resourceGroupName, string testBaseAccountName, bool? restore = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, restore, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static TestBaseAccountResource Update(this ITestBaseAccountOperations operations, TestBaseAccountUpdateParameters parameters, string resourceGroupName, string testBaseAccountName)
            {
                return operations.UpdateAsync(parameters, resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountResource> UpdateAsync(this ITestBaseAccountOperations operations, TestBaseAccountUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static TestBaseAccountDeleteHeaders Delete(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.DeleteAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountDeleteHeaders> DeleteAsync(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static TestBaseAccountResource Get(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.GetAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountResource> GetAsync(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Offboard a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static TestBaseAccountOffboardHeaders Offboard(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.OffboardAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Offboard a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountOffboardHeaders> OffboardAsync(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OffboardWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Account in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='restore'>
            /// The flag indicating if we would like to restore the Test Base Accounts
            /// which were soft deleted before.
            /// </param>
            public static TestBaseAccountResource BeginCreate(this ITestBaseAccountOperations operations, TestBaseAccountResource parameters, string resourceGroupName, string testBaseAccountName, bool? restore = default(bool?))
            {
                return operations.BeginCreateAsync(parameters, resourceGroupName, testBaseAccountName, restore).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Account in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='restore'>
            /// The flag indicating if we would like to restore the Test Base Accounts
            /// which were soft deleted before.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountResource> BeginCreateAsync(this ITestBaseAccountOperations operations, TestBaseAccountResource parameters, string resourceGroupName, string testBaseAccountName, bool? restore = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, restore, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static TestBaseAccountResource BeginUpdate(this ITestBaseAccountOperations operations, TestBaseAccountUpdateParameters parameters, string resourceGroupName, string testBaseAccountName)
            {
                return operations.BeginUpdateAsync(parameters, resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Account.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountResource> BeginUpdateAsync(this ITestBaseAccountOperations operations, TestBaseAccountUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static TestBaseAccountDeleteHeaders BeginDelete(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountDeleteHeaders> BeginDeleteAsync(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Offboard a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static TestBaseAccountOffboardHeaders BeginOffboard(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.BeginOffboardAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Offboard a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestBaseAccountOffboardHeaders> BeginOffboardAsync(this ITestBaseAccountOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginOffboardWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
