// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// REST API for Test Base
    /// </summary>
    public partial interface IRESTAPIforTestBaseClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        ServiceClientCredentials Credentials { get; }

        /// <summary>
        /// The API version to be used with the HTTP request.
        /// </summary>
        string ApiVersion { get; }

        /// <summary>
        /// The Azure subscription ID. This is a GUID-formatted string.
        /// </summary>
        string SubscriptionId { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// value is 30.
        /// </summary>
        int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When
        /// set to true a unique x-ms-client-request-id value is generated and
        /// included in each request. Default is true.
        /// </summary>
        bool? GenerateClientRequestId { get; set; }


        /// <summary>
        /// Gets the ISKUsOperations.
        /// </summary>
        ISKUsOperations SKUs { get; }

        /// <summary>
        /// Gets the ITestBaseAccountsOperations.
        /// </summary>
        ITestBaseAccountsOperations TestBaseAccounts { get; }

        /// <summary>
        /// Gets the ITestBaseAccountOperations.
        /// </summary>
        ITestBaseAccountOperations TestBaseAccount { get; }

        /// <summary>
        /// Gets the ITestBaseAccountUsageOperations.
        /// </summary>
        ITestBaseAccountUsageOperations TestBaseAccountUsage { get; }

        /// <summary>
        /// Gets the ITestBaseAccountAvailableOSsOperations.
        /// </summary>
        ITestBaseAccountAvailableOSsOperations TestBaseAccountAvailableOSs { get; }

        /// <summary>
        /// Gets the ITestBaseAccountAvailableOSOperations.
        /// </summary>
        ITestBaseAccountAvailableOSOperations TestBaseAccountAvailableOS { get; }

        /// <summary>
        /// Gets the ITestBaseAccountFlightingRingsOperations.
        /// </summary>
        ITestBaseAccountFlightingRingsOperations TestBaseAccountFlightingRings { get; }

        /// <summary>
        /// Gets the ITestBaseAccountFlightingRingOperations.
        /// </summary>
        ITestBaseAccountFlightingRingOperations TestBaseAccountFlightingRing { get; }

        /// <summary>
        /// Gets the ITestBaseAccountTestTypesOperations.
        /// </summary>
        ITestBaseAccountTestTypesOperations TestBaseAccountTestTypes { get; }

        /// <summary>
        /// Gets the ITestBaseAccountTestTypeOperations.
        /// </summary>
        ITestBaseAccountTestTypeOperations TestBaseAccountTestType { get; }

        /// <summary>
        /// Gets the IPackagesOperations.
        /// </summary>
        IPackagesOperations Packages { get; }

        /// <summary>
        /// Gets the IPackageOperations.
        /// </summary>
        IPackageOperations Package { get; }

        /// <summary>
        /// Gets the ITestSummariesOperations.
        /// </summary>
        ITestSummariesOperations TestSummaries { get; }

        /// <summary>
        /// Gets the ITestSummaryOperations.
        /// </summary>
        ITestSummaryOperations TestSummary { get; }

        /// <summary>
        /// Gets the ITestResultsOperations.
        /// </summary>
        ITestResultsOperations TestResults { get; }

        /// <summary>
        /// Gets the ITestResultOperations.
        /// </summary>
        ITestResultOperations TestResult { get; }

        /// <summary>
        /// Gets the IOSUpdatesOperations.
        /// </summary>
        IOSUpdatesOperations OSUpdates { get; }

        /// <summary>
        /// Gets the IOSUpdateOperations.
        /// </summary>
        IOSUpdateOperations OSUpdate { get; }

        /// <summary>
        /// Gets the IFavoriteProcessesOperations.
        /// </summary>
        IFavoriteProcessesOperations FavoriteProcesses { get; }

        /// <summary>
        /// Gets the IFavoriteProcessOperations.
        /// </summary>
        IFavoriteProcessOperations FavoriteProcess { get; }

        /// <summary>
        /// Gets the IAnalysisResultsOperations.
        /// </summary>
        IAnalysisResultsOperations AnalysisResults { get; }

        /// <summary>
        /// Gets the IAnalysisResultOperations.
        /// </summary>
        IAnalysisResultOperations AnalysisResult { get; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        IOperations Operations { get; }

        /// <summary>
        /// Gets the file upload URL of a Test Base Account.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource.
        /// </param>
        /// <param name='testBaseAccountName'>
        /// The resource name of the Test Base Account.
        /// </param>
        /// <param name='blobName'>
        /// The custom file name of the uploaded blob.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<FileUploadURLResponse>> TestBaseAccountGetFileUploadUrlWithHttpMessagesAsync(string resourceGroupName, string testBaseAccountName, string blobName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks that the Test Base Package name and version is valid and is
        /// not already in use.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource.
        /// </param>
        /// <param name='testBaseAccountName'>
        /// The resource name of the Test Base Account.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Test Base Package CheckNameAvailability
        /// operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<CheckNameAvailabilityResult>> CheckPackageNameAvailabilityWithHttpMessagesAsync(string resourceGroupName, string testBaseAccountName, PackageCheckNameAvailabilityParameters parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the download URL of a package.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource.
        /// </param>
        /// <param name='testBaseAccountName'>
        /// The resource name of the Test Base Account.
        /// </param>
        /// <param name='packageName'>
        /// The resource name of the Test Base Package.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DownloadURLResponse>> PackageGetDownloadURLWithHttpMessagesAsync(string resourceGroupName, string testBaseAccountName, string packageName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the download URL or the test result.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource.
        /// </param>
        /// <param name='testBaseAccountName'>
        /// The resource name of the Test Base Account.
        /// </param>
        /// <param name='packageName'>
        /// The resource name of the Test Base Package.
        /// </param>
        /// <param name='testResultName'>
        /// The Test Result Name. It equals to {osName}-{TestResultId} string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DownloadURLResponse>> TestResultGetDownloadURLWithHttpMessagesAsync(string resourceGroupName, string testBaseAccountName, string packageName, string testResultName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the download URL of the test execution screen recording.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource.
        /// </param>
        /// <param name='testBaseAccountName'>
        /// The resource name of the Test Base Account.
        /// </param>
        /// <param name='packageName'>
        /// The resource name of the Test Base Package.
        /// </param>
        /// <param name='testResultName'>
        /// The Test Result Name. It equals to {osName}-{TestResultId} string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<DownloadURLResponse>> TestResultGetVideoDownloadURLWithHttpMessagesAsync(string resourceGroupName, string testBaseAccountName, string packageName, string testResultName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
